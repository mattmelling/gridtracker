# This file is a template, and might need editing before it works on your project.
# see https://docs.gitlab.com/ee/ci/yaml/README.html for all available options

variables:
  DEFAULT_IMAGE: debian:stable
  EXTRA_DESCRIPTION: ''

# only run for merge requests and tags
include:
  - template: "Workflows/MergeRequest-Pipelines.gitlab-ci.yml"

default:
  image: ${DEFAULT_IMAGE}
  interruptible: true

cache:
  paths:
    - .cache/
  key:
    files:
      - package.json
      - package.nw/package.json

before_script:
  - export APT_CACHE_DIR=`pwd`/.cache/apt && mkdir -pv $APT_CACHE_DIR
  - export NPM_CONFIG_CACHE=`pwd`/.cache/npm && mkdir -pv $NPM_CONFIG_CACHE
  - dpkg --add-architecture i386
  - apt-get update
  - apt-get -y install npm wine wine32
  - apt-get -y install git dh-make build-essential devscripts lintian diffutils patch quilt
  - apt-get -y build-dep .
  - npm install

build_all_job:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
  artifacts:
    paths:
      - build/*
    expire_in: 1 week
  script:
    - export APT_CACHE_DIR=`pwd`/.cache/apt && mkdir -pv $APT_CACHE_DIR
    - export NPM_CONFIG_CACHE=`pwd`/.cache/npm && mkdir -pv $NPM_CONFIG_CACHE
    - dpkg-buildpackage -uc -us
    - mkdir build build/debian
    - mv ../*.{deb,dsc,buildinfo,tar.xz,changes} build/debian/
    - npm run dist
    - (cd package.nw/dist ; mv *.zip *.exe *.7z *.json ../../build)

test_job:
  stage: test
  script:
    - export APT_CACHE_DIR=`pwd`/.cache/apt && mkdir -pv $APT_CACHE_DIR
    - export NPM_CONFIG_CACHE=`pwd`/.cache/npm && mkdir -pv $NPM_CONFIG_CACHE
    - npm test

release_job:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - echo 'Release for $CI_COMMIT_TAG'
  release:
    name: 'Release $CI_COMMIT_TAG'
    description: debian/changelog
    tag_name: '$CI_COMMIT_TAG'
    ref: '$CI_COMMIT_SHA'


# test2:
#   stage: test
#   script:
#     - echo "Do another parallel test here"
#     - echo "For example run a lint test"
#
# deploy1:
#   stage: deploy
#   only:
#     - tags
#   script:
#     - echo "Do your deploy here"
